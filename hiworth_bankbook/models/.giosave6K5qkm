from openerp.exceptions import except_orm, ValidationError
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT
from openerp.exceptions import Warning as UserError
from openerp import models, fields, api, _
from openerp import workflow
import time
import datetime
from datetime import date
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp
from datetime import timedelta
from pychart.arrow import default
from openerp.osv import osv, expression



class BankBook(models.Model):
	_name = 'bank.book'
	_rec_name = 'date'

	READONLY_STATES = {
		'close': [('readonly', True)],
	}

	@api.onchange('account_id')
	def onchange_account(self):
		if self.account_id:
			self.opening = self.account_id.balance


	@api.model
	def default_get(self, fields):
		res = super(BankBook, self).default_get(fields)
		line_id = self.env['bank.book.configuration.line'].search([('bankbook_config_id','=',self.env.user.company_id.id)], limit=1, order='id asc')
		if line_id:
			# return line_id.account_id.id
			res.update({'account_id': line_id.account_id.id})
		return res

	@api.multi
	@api.depends('move_lines')
	def compute_current_balance(self):
		for rec in self:
			debit = 0
			credit = 0
			for lines in rec.move_lines:
				debit += lines.debit
				credit += lines.credit
			rec.current_balance = rec.opening + (debit - credit)

	@api.multi
	@api.depends('actual_balance')
	def compute_difference(self):
		if self.actual_balance:
			if self.actual_balance == self.current_balance:
				self.is_difference = False
			else:
				self.is_difference = True
				bank_book_config = self.env['res.company'].search([], limit=1)
				if bank_book_config:
					self.write_off_account = bank_book_config.write_off_account.id
		else:
			self.is_difference = False


	date = fields.Date('Date', states=READONLY_STATES)
	user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user, states=READONLY_STATES)
	account_id = fields.Many2one('account.account', 'Account', states=READONLY_STATES)
	opening = fields.Float('Opening Balance')
	move_lines = fields.One2many('account.move.line', 'bank_book_id', 'Transactions', states=READONLY_STATES)
	state = fields.Selection([('draft', 'Draft'),('open', 'Open'),('close', 'Closed')], 'State', default='draft')
	balance = fields.Float('Balance', states=READONLY_STATES)
	remarks = fields.Text('Remarks', states=READONLY_STATES)
	current_balance = fields.Float(compute='compute_current_balance', string="Balance")
	actual_balance = fields.Float('Actual Balance', states=READONLY_STATES)
	write_off_account =  fields.Many2one('account.account', 'Write Off Account', states=READONLY_STATES)
	is_difference = fields.Boolean(compute='compute_difference', string="Difference")
	company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.user.company_id)

	@api.multi
	def action_open(self):
		for rec in self:
			rec.state = 'open'
	

	@api.multi
	def action_close(self):
		for rec in self:
			if rec.actual_balance != rec.current_balance:
				journal =  self.env['account.journal'].search([('type','=','general'),('company_id','=',rec.company_id.id)], limit=1)
				if not journal:
					raise UserError("Please create a journal with type 'General'.")					
				move = self.env['account.move'].create({'journal_id':journal.id,'date':rec.date})

				move_line = self.env['account.move.line']
				amount = 0
				debit_account = False
				credit_account = False
				if rec.actual_balance < rec.current_balance:
					amount = rec.current_balance - rec.actual_balance
					debit_account = rec.write_off_account.id
					credit_account = rec.account_id.id
				else:
					amount = rec.actual_balance - rec.current_balance
					debit_account = rec.account_id.id
					credit_account = rec.write_off_account.id
				move_line.create({'move_id':move.id,
								  'state': 'valid',
								  'name': 'Write Off amount from '+' '+rec.user_id.name+' on'+ str(rec.date),
								  'account_id':credit_account,
								  'debit':0,
								  'credit':amount,
								  'closed':True
								})
				move_line.create({'move_id':move.id,
								  'state': 'valid',
								  'name': 'Write Off amount from '+' '+rec.user_id.name+' on'+ str(rec.date),
								  'account_id':debit_account,
								  'debit':amount,
								  'credit':0,
								  'closed':True
								})
				for lines in rec.move_lines:
					if lines.closed == True:
						lines.bank_book_id = False
				move.button_validate()
				rec.state = 'close'
			else:
				rec.state = 'close'

	@api.model
	def create(self,vals):
		result = super(BankBook, self).create(vals)
		result.opening = result.account_id.balance
		return result

class BankBook(models.Model):
	_name = 'bank.in.hand'
	_rec_name = 'date'

	READONLY_STATES = {
		'close': [('readonly', True)],
	}

	@api.onchange('account_id')
	def onchange_account(self):
		if self.account_id:
			self.opening = self.account_id.balance


	@api.model
	def default_get(self, fields):
		res = super(BankBook, self).default_get(fields)
		line_id = self.env['bank.in.hand.configuration.line'].search([('bank_in_hand_account_ids','=',self.env.user.company_id.id)], limit=1, order='id asc')
		if line_id:
			# return line_id.account_id.id
			res.update({'account_id': line_id.account_id.id})
		return res

	@api.multi
	@api.depends('move_lines')
	def compute_current_balance(self):
		for rec in self:
			debit = 0
			credit = 0
			for lines in rec.move_lines:
				debit += lines.debit
				credit += lines.credit
			rec.current_balance = rec.opening + (debit - credit)

	@api.multi
	@api.depends('actual_balance')
	def compute_difference(self):
		if self.actual_balance:
			if self.actual_balance == self.current_balance:
				self.is_difference = False
			else:
				self.is_difference = True
				bank_book_config = self.env['res.company'].search([], limit=1)
				if bank_book_config:
					self.write_off_account = bank_book_config.write_off_account.id
		else:
			self.is_difference = False


	date = fields.Date('Date', states=READONLY_STATES)
	user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user, states=READONLY_STATES)
	account_id = fields.Many2one('account.account', 'Account', states=READONLY_STATES)
	opening = fields.Float('Opening Balance')
	move_lines = fields.One2many('account.move.line', 'bank_book_id', 'Transactions', states=READONLY_STATES)
	state = fields.Selection([('draft', 'Draft'),('open', 'Open'),('close', 'Closed')], 'State', default='draft')
	balance = fields.Float('Balance', states=READONLY_STATES)
	remarks = fields.Text('Remarks', states=READONLY_STATES)
	current_balance = fields.Float(compute='compute_current_balance', string="Balance")
	actual_balance = fields.Float('Actual Balance', states=READONLY_STATES)
	write_off_account =  fields.Many2one('account.account', 'Write Off Account', states=READONLY_STATES)
	is_difference = fields.Boolean(compute='compute_difference', string="Difference")
	company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.user.company_id)

	@api.multi
	def action_open(self):
		for rec in self:
			rec.state = 'open'
	

	@api.multi
	def action_close(self):
		for rec in self:
			if rec.actual_balance != rec.current_balance:
				journal =  self.env['account.journal'].search([('type','=','general'),('company_id','=',rec.company_id.id)], limit=1)
				if not journal:
					raise UserError("Please create a journal with type 'General'.")					
				move = self.env['account.move'].create({'journal_id':journal.id,'date':rec.date})

				move_line = self.env['account.move.line']
				amount = 0
				debit_account = False
				credit_account = False
				if rec.actual_balance < rec.current_balance:
					amount = rec.current_balance - rec.actual_balance
					debit_account = rec.write_off_account.id
					credit_account = rec.account_id.id
				else:
					amount = rec.actual_balance - rec.current_balance
					debit_account = rec.account_id.id
					credit_account = rec.write_off_account.id
				move_line.create({'move_id':move.id,
								  'state': 'valid',
								  'name': 'Write Off amount from '+' '+rec.user_id.name+' on'+ str(rec.date),
								  'account_id':credit_account,
								  'debit':0,
								  'credit':amount,
								  'closed':True
								})
				move_line.create({'move_id':move.id,
								  'state': 'valid',
								  'name': 'Write Off amount from '+' '+rec.user_id.name+' on'+ str(rec.date),
								  'account_id':debit_account,
								  'debit':amount,
								  'credit':0,
								  'closed':True
								})
				for lines in rec.move_lines:
					if lines.closed == True:
						lines.bank_in_hand_id = False
				move.button_validate()
				rec.state = 'close'
			else:
				rec.state = 'close'

	@api.model
	def create(self,vals):
		result = super(BankBook, self).create(vals)
		result.opening = result.account_id.balance
		return result





class AccountMoveLine(models.Model):
	_inherit = 'account.move.line'

	bank_book_id = fields.Many2one('bank.book', 'Bank Book')
	bank_in_hand_id = fields.Many2one('bank.in.hand', 'Bank Book')
	closed = fields.Boolean('Closed', default=False)


	@api.constrains('account_id')
	def _check_duplicate_account_id(self):
		if self.move_id.date:
			account_ids =  [line.account_id.id for line in self.company_id.account_ids]
			if self.account_id.id in account_ids:
				bank_book = self.env['bank.book'].search([('date','=',self.move_id.date),('account_id','=',self.account_id.id),('state','=','open')])
				bank_in_hand_book = self.env['bank.in.hand'].search([('date','=',self.move_id.date),('account_id','=',self.account_id.id),('state','=','open')])
				if not bank_book:
					raise UserError("Please open today's Bank In Box Book...........!")
				if not bank_in_hand_book:
					raise UserError("Please open today's Bank In Hand Book...........!")

	@api.model
	def create(self,vals):
		result = super(AccountMoveLine, self).create(vals)
		if result.move_id.date:

			print 'account_ids===================', result.company_id.account_ids
			account_ids =  [line.account_id.id for line in result.company_id.account_ids]
			if result.account_id.id in account_ids:
				# print 'test=========================sasdff'
				bank_book = self.env['bank.book'].search([('date','=',result.move_id.date),('account_id','=',result.account_id.id),('state','=','open')])
				# print 'cash_book==========================', cash_book,asd
				if bank_book:
					result.bank_book_id = bank_book.id
				bank_in_hand_book = self.env['bank.in.hand'].search([('date','=',result.move_id.date),('account_id','=',result.account_id.id),('state','=','open')])
				# print 'cash_book==========================', cash_book,asd
				if bank_in_hand_book:
					result.bank_in_hand_book = bank_in_hand_book.id
		return result


class BankBookConfigurationLine(models.Model):
	_name = 'bank.book.configuration.line'

	bankbook_config_id = fields.Many2one('res.company', Bankbook Configuration')
	account_id = fields.Many2one('account.account', "Account")

class BankInHandConfigurationLine(models.Model):
	_name = 'bank.in.hand.configuration.line'

	bank_in_hand_config_id = fields.Many2one('res.company', 'Cashbook Configuration')
	account_id = fields.Many2one('account.account', "Account")



class ResCompany(models.Model):
	_inherit = 'res.company'

	account_ids = fields.One2many('bank.book.configuration.line', bankbook_config_id','Accounts to Bank In Box Register')
	bank_in_hand_account_ids = fields.One2many('bank.in.hand.configuration.line', bank_in_hand_config_id','Accounts to Bank In Hand Register')
	write_off_account = fields.Many2one('account.account', 'Account for Write Off', domain=[('type','=','other')])






